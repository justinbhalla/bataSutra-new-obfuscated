/* ========= Headlines (lightweight hydration) ========= */
const HEADLINES_SHEET_ID = '1WN8151jGQjqbfO0Aj2tK-79yJ9gCD_z0DLCdxs_higg';
const HEADLINES_TAB = 'Headlines';

const gvizCsv = (sheetId, sheet, range) =>
  `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:csv&headers=1&sheet=${encodeURIComponent(sheet)}&range=${encodeURIComponent(range)}&t=${Date.now()}`;

function parseCsv(text){
  if ((text||'').trim().startsWith('<')) return { rows: [], isHtml:true };
  const rows=[]; let row=[], cur='', inQuotes=false;
  for(let i=0;i<text.length;i++){
    const ch=text[i];
    if(inQuotes){
      if(ch === '"'){ if(text[i+1] === '"'){ cur+='"'; i++; } else { inQuotes=false; } }
      else cur+=ch;
    } else {
      if(ch === '"') inQuotes=true;
      else if(ch === ','){ row.push(cur); cur=''; }
      else if(ch === '\n'){ row.push(cur); rows.push(row); row=[]; cur=''; }
      else if(ch !== '\r'){ cur+=ch; }
    }
  }
  if(cur.length>0 || row.length>0){ row.push(cur); rows.push(row); }
  return { rows, isHtml:false };
}

async function fetchCsv({sheetId, sheet, range}){
  try{
    const res = await fetch(gvizCsv(sheetId, sheet, range), { cache:'no-store' });
    if(!res.ok) throw new Error('HTTP '+res.status);
    const txt = await res.text();
    const {rows,isHtml}=parseCsv(txt);
    if(isHtml||!rows.length) return [];
    const headers = rows[0].map(h => h.replace(/^\uFEFF/,'').replace(/\u00A0/g,' ').trim());
    return rows.slice(1)
      .filter(r => r.some(x => (x??'').toString().trim()!==''))
      .map(r => Object.fromEntries(headers.map((h,i)=>[h, (r[i]??'').toString().trim()])));
  }catch{ return []; }
}

function renderTicker(id, items, dir='right'){
  const el = document.getElementById(id); if (!el) return;
  el.classList.remove('ticker-left','ticker-right'); el.textContent='';
  const loop=[...items,...items];
  loop.forEach(t=>{
    const s=document.createElement('span');
    s.textContent=String(t||'').trim();
    el.appendChild(s);
  });
  // restart animation
  void el.offsetWidth;
  el.classList.add(dir==='right'?'ticker-right':'ticker-left','ticker');

  // ensure width to loop smoothly
  const railWidth = el.parentElement?.clientWidth || 0;
  while (el.scrollWidth < railWidth * 2) {
    const clone = el.cloneNode(true);
    [...clone.children].forEach(ch => el.appendChild(ch));
  }
}

async function hydrateTickers(){
  const data = await fetchCsv({sheetId:HEADLINES_SHEET_ID, sheet:HEADLINES_TAB, range:'A:B'});
  const top    = data.filter(h=>/^top$/i.test((h.Section||''))).map(h=>h.Text).filter(Boolean);
  const bottom = data.filter(h=>/^bottom$/i.test((h.Section||''))).map(h=>h.Text).filter(Boolean);
  if (top.length)    renderTicker('topTicker', top, 'right');
  if (bottom.length) renderTicker('bottomTicker', bottom, 'left');
}

/* ========= Simple Old vs New logic ========= */
const $ = s => document.querySelector(s);
const fmtINR = (n, d=0)=> Number.isFinite(n)? n.toLocaleString('en-IN',{maximumFractionDigits:d}) : '—';
const toNum  = v => { const n = Number(v); return Number.isFinite(n)? n : 0; };
const setOut = (id, v)=>{ const el = document.getElementById(id); if(!el) return; const txt = String(v ?? '—'); el.textContent = txt; el.title = txt; };

// FY 2024–25 slabs
const OLD_BANDS = [0, 250000, 500000, 1000000];
const OLD_RATES = [0, 5, 20, 30];
const NEW_BANDS = [0, 300000, 600000, 900000, 1200000, 1500000];
const NEW_RATES = [0, 5, 10, 15, 20, 30];
const CESS = 0.04;
const REBATE_OLD = 500000; // 87A
const REBATE_NEW = 700000; // 87A (enhanced)

function slabTax(taxable, bands, rates){
  let tax=0;
  if (taxable<=0) return 0;
  for (let i=0;i<bands.length;i++){
    const start=bands[i], end=(i+1<bands.length?bands[i+1]:taxable);
    const top = Math.min(end, taxable), amt = Math.max(0, top - start);
    const rate = (rates[i] ?? rates[rates.length-1] ?? 0)/100;
    if (amt>0) tax += amt*rate;
  }
  return tax;
}

function compute(regime, gross, std, oldDed, ccd2){
  const taxable = Math.max(0, regime==='old'
    ? gross - std - oldDed - ccd2
    : gross - std - ccd2);

  const rebateLim = (regime==='old') ? REBATE_OLD : REBATE_NEW;
  const baseTax = slabTax(taxable, regime==='old'?OLD_BANDS:NEW_BANDS, regime==='old'?OLD_RATES:NEW_RATES);
  const taxBeforeCess = (taxable>0 && taxable<=rebateLim) ? 0 : baseTax;
  const tax = taxBeforeCess * (1 + CESS);
  return {taxable, baseTax, tax};
}

function compare(){
  const gross = toNum($('#income').value);
  const std   = toNum($('#std').value || 50000);
  const oldD  = toNum($('#oldDed').value);
  const nps   = toNum($('#ccd2').value);

  const oldRes = compute('old', gross, std, oldD, nps);
  const newRes = compute('new', gross, std, 0,   nps);

  const oldEff = gross>0 ? (oldRes.tax/gross*100).toFixed(2)+'%' : '—';
  const newEff = gross>0 ? (newRes.tax/gross*100).toFixed(2)+'%' : '—';
  const oldTake = `₹ ${fmtINR(gross - oldRes.tax)}`;
  const newTake = `₹ ${fmtINR(gross - newRes.tax)}`;

  setOut('oldTax', `₹ ${fmtINR(oldRes.tax)}`);
  setOut('newTax', `₹ ${fmtINR(newRes.tax)}`);
  setOut('oldEff', oldEff); setOut('newEff', newEff);
  setOut('oldTake', oldTake); setOut('newTake', newTake);

  const better = (newRes.tax < oldRes.tax) ? 'New' : (newRes.tax > oldRes.tax ? 'Old' : 'Either');
  const delta = Math.abs(newRes.tax - oldRes.tax);
  document.getElementById('rec').innerHTML = (better==='Either')
    ? `Both regimes are roughly equal for your inputs. Choose the one that’s simpler for your documentation.`
    : `<b>${better} regime</b> yields ~<b>₹${fmtINR(delta)}</b> lower tax.`;

  $('#msg').textContent = 'Done.';
  pushState();
}

// Events
document.addEventListener('DOMContentLoaded', () => {
  document.getElementById('calc')?.addEventListener('click', compare);
  document.getElementById('reset')?.addEventListener('click', ()=>{
    ['#income','#oldDed','#ccd2'].forEach(s=>$(s).value='');
    $('#std').value='50000';
    ['oldTax','newTax','oldEff','newEff','oldTake','newTake'].forEach(id=>setOut(id,'—'));
    document.getElementById('rec').textContent='—';
    $('#msg').textContent=''; pushState();
  });

  // Examples
  function applyExample(key){
    if(key==='ex1'){ $('#income').value=750000; $('#std').value=50000; $('#oldDed').value=175000; $('#ccd2').value=0; }
    if(key==='ex2'){ $('#income').value=1200000; $('#std').value=50000; $('#oldDed').value=200000; $('#ccd2').value=500000; }
    if(key==='ex3'){ $('#income').value=2400000; $('#std').value=50000; $('#oldDed').value=300000; $('#ccd2').value=1000000; }
    compare();
  }
  document.addEventListener('click',(e)=>{
    const btn = e.target.closest('[data-ex]'); if(btn) applyExample(btn.getAttribute('data-ex'));
  });

  // Footer year + init
  const y=document.getElementById('year'); if (y) y.textContent = new Date().getFullYear();
  loadFromURL();
  hydrateTickers().catch(()=>{});

  // Quick keyboard: Ctrl/Cmd+K focuses first field
  window.addEventListener('keydown',(e)=>{
    const isMac = navigator.platform.toUpperCase().includes('MAC');
    if ((isMac && e.metaKey && e.key.toLowerCase()==='k') || (!isMac && e.ctrlKey && e.key.toLowerCase()==='k')) {
      e.preventDefault(); document.getElementById('income')?.focus();
    }
  });
});

/* ========= URL state & copy link ========= */
function pushState(){
  const p = new URLSearchParams();
  const set=(k,v)=>{ if(v!=='' && v!=null) p.set(k,v); };
  set('i',$('#income').value); set('s',$('#std').value);
  set('o',$('#oldDed').value); set('n',$('#ccd2').value);
  history.replaceState(null,'','?'+p.toString());
}
function loadFromURL(){
  const q=new URLSearchParams(location.search), get=(k)=> q.has(k)? q.get(k) : '';
  $('#income').value=get('i'); $('#std').value=get('s')||'50000';
  $('#oldDed').value=get('o'); $('#ccd2').value=get('n');
}

// Copy link
const copyBtn = document.getElementById('copyLink');
if (copyBtn){
  copyBtn.addEventListener('click', async ()=>{
    pushState();
    try{
      await navigator.clipboard.writeText(location.href);
      const old=copyBtn.textContent;
      copyBtn.textContent='Copied!';
      setTimeout(()=>copyBtn.textContent=old,1200);
    }catch{}
  });
}
